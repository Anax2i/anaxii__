name: osu-wiki continuous integration

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
    types:
      - opened
      - reopened
      - synchronize
      - edited

jobs:
  ci:
    name: changed files
    runs-on: ubuntu-latest
    steps:
      - name: sparse checkout
        shell: bash
        run: |
          # repository url, utilising provided github credentials
          REPOSITORY="https://${{ github.actor }}:${{ github.token }}@github.com/${{ github.repository }}.git"
          # merge commit ref name (with refs/heads/ stripped out)
          BRANCH="${GITHUB_REF/#refs\/heads\//}"

          git version
          # clone without blobs; don't checkout to avoid fetching them anyway
          git clone --filter=blob:none --no-checkout ${REPOSITORY} .
          git config --local gc.auto 0

          # set up sparse checkout
          git sparse-checkout init
          git sparse-checkout set '**/*.md' '**/.remark*' '**/*.json' '**/*.yaml' '.github/scripts' 'wiki/**/*'

          # fetch the merge commit ref
          git -c protocol.version=2 fetch --no-tags --prune --progress --depth=2 origin +${GITHUB_SHA}:refs/remotes/origin/${BRANCH}
          git checkout --progress --force -B $BRANCH refs/remotes/origin/$BRANCH

      - name: inspect binary file sizes
        shell: bash
        run: |
          WARN_ON_SIZE=500000
          ERROR_ON_SIZE=1000000
          EXIT=0

          while read file
          do
              echo "Checking ${file}..."
              # git ls-tree will output:
              # (file mode) (file type) (blob hash)<TAB>(file name)
              # we're interested in the hash to pull the file's size using cat-file
              hash=`git ls-tree ${{ github.sha }} "${file}" | awk -F ' ' '{ print $3 }'`
              filesize=`git cat-file -s ${hash} 2>/dev/null`

              if [[ ${filesize} -ge ${ERROR_ON_SIZE} ]]; then
                  echo "::error file=${file}::The size of the file exceeds 1MB. Compress it to optimise performance."
                  EXIT=1
              elif [[ ${filesize} -ge ${WARN_ON_SIZE} ]]; then
                  echo "::warning file=${file}::The size of the file exceeds 500kB. Consider compressing it to optimise performance."
              else
                  echo "::debug::File ${file} is ok."
              fi
          done < <(git diff --numstat --no-renames --diff-filter=d ${{ github.sha }}^ ${{ github.sha }} | grep -Poe '-\t-\t\K.+')
          # git diff --numstat will output -<TAB>-<TAB>$filename for blobs

          exit ${EXIT}

      - name: setup node
        uses: actions/setup-node@v1

      - name: install remark
        run: npm install

      - name: run remark on changed files
        # xargs is ran with -d '\n' to properly handle single and double quotes
        # stdout is discarded (remark prints files being checked there)
        run: git diff --diff-filter=d --name-only ${{ github.sha }}^ ${{ github.sha }} '*.md' | xargs -d '\n' npx remark -qf --no-stdout --silently-ignore --report=vfile-reporter-position --color

      - name: setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: setup and run yamllint on .yaml and .md files
        run: |
          pip install yamllint
          python .github/scripts/ci/run_yamllint.py --config .yamllint.yaml

      - name: find broken wikilinks
        run: |
          ARTICLES=$( git diff --diff-filter=d --name-only ${{ github.sha }}^ ${{ github.sha }} "wiki/**/*.md" "news/*.md" )
          python .github/scripts/ci/find_broken_wikilinks.py --target $ARTICLES

      - name: check if translations are marked as outdated
        shell: bash
        env:
          PULL_REQUEST_TAG: 'SKIP_OUTDATED_CHECK'
        run: |
          function skip_check () {
            if ${{ github.event_name == 'pull_request' }}; then
              ${{ contains(github.event.pull_request.body, env.PULL_REQUEST_TAG) }}
            elif ${{ github.event_name == 'push' }}; then {
              commits_url="${{ github.event.push.repository.commits_url }}"
              suffix='{/sha}'
              desired_suffix='/${{ github.sha }}/pulls'
              pulls_url="${commits_url/$suffix/$desired_suffix}"
              [[ $( curl -sS "$pulls_url" | jq -r '.[0].body' ) =~ $PULL_REQUEST_TAG ]]
            }
            fi
          }

          if skip_check; then
            echo "Outdated articles check suppressed ($PULL_REQUEST_TAG tag found in the pull request)"
            exit 0
          fi

          # get the first commit of the branch associated with the PR; GitHub's ubuntu-latest has curl/jq: https://github.com/actions/virtual-environments
          first_commit_hash=$( curl -sS "${{ github.event.pull_request.commits_url }}?per_page=1" | jq -r '.[0].sha' )
          bash .github/scripts/ci/check_freshness.sh -f "${{ github.sha }}~1" -t "${{ github.sha }}" -s "$first_commit_hash"
